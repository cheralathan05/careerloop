// server/controllers/onboardingController.js (FINAL, FULLY CORRECTED VERSION âœ…)

// Convert require to import (Assuming these files are now using ES Modules)
import Onboarding from '../models/Onboarding.js';
import asyncHandler from 'express-async-handler';
import aiService from '../services/aiService.js';
import { success, error } from '../utils/responseHandler.js';
import { setCache } from '../utils/redisClient.js';

// ====================================================
// ðŸ”¹ SAVE DETAILS
// ====================================================
export const saveDetails = asyncHandler(async (req, res) => {
Â  const userId = req.user.id;
Â  const payload = req.body;
Â  let onboarding = await Onboarding.findOne({ user: userId });
Â  if (!onboarding) {
Â  Â  onboarding = await Onboarding.create({ user: userId, personalInfo: payload.personalInfo || {} });
Â  } else {
Â  Â  onboarding.personalInfo = { ...(onboarding.personalInfo || {}), ...(payload.personalInfo || {}) };
Â  Â  await onboarding.save();
Â  }
Â  success(res, 200, { message: 'Saved', onboarding });
});

// ====================================================
// ðŸ”¹ GET DOMAINS
// ====================================================
export const getDomains = asyncHandler(async (req, res) => {
Â  const userId = req.params.userId || req.user.id;
Â  const onboarding = await Onboarding.findOne({ user: userId });
Â  const skills = (onboarding?.personalInfo?.skills) || [];
Â  const domains = await aiService.recommendDomains(skills, onboarding?.personalInfo?.interests || []);
Â  // cache
Â  await setCache(`domains:${userId}`, domains, 3600);
Â  success(res, 200, { domains });
});

// ====================================================
// ðŸ”¹ GET QUIZ
// ====================================================
export const getQuiz = asyncHandler(async (req, res) => {
Â  const userId = req.params.userId || req.user.id;
Â  const onboarding = await Onboarding.findOne({ user: userId });
Â  const domains = onboarding?.selectedDomains?.length ? onboarding.selectedDomains : ['General'];
Â  
  // âœ… FIX: Pass userId as the first argument, as required by aiService.generateQuiz
Â  const quiz = await aiService.generateQuiz(userId, domains);
  
Â  success(res, 200, { quiz });
});

// ====================================================
// ðŸ”¹ SUBMIT ASSESSMENT
// ====================================================
export const submitAssessment = asyncHandler(async (req, res) => {
Â  const userId = req.user.id;
Â  const { results } = req.body;
Â  // store results in Onboarding.skillScores
Â  let onboarding = await Onboarding.findOne({ user: userId });
Â  onboarding = onboarding || new Onboarding({ user: userId });
Â  onboarding.skillScores = results;
Â  await onboarding.save();
Â  success(res, 200, { message: 'Assessment saved', onboarding });
});

// ====================================================
// ðŸ”¹ GET SUMMARY
// ====================================================
export const getSummary = asyncHandler(async (req, res) => {
Â  const userId = req.params.userId || req.user.id;
Â  const onboarding = await Onboarding.findOne({ user: userId });
Â  const summary = await aiService.summarizeOnboarding(onboarding || {});
Â  success(res, 200, { summary });
});